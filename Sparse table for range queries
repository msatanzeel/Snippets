
auto compare(auto a, auto b)
{
    return min(a, b);
}

class RangeQueries
{
public:
    vector<vector<int>> sparse;
    int n;
    int logN;

    RangeQueries(vector<int> &arr)
    {
        n = arr.size();
        logN = ceil(log2(n));
        sparse.resize(n, vector<int>(logN + 1, INT_MAX));


        for (int i = 0; i < n; i++)
        {
            sparse[i][0] = arr[i];
        }

        for (int j = 1; j <= logN; j++)
        {
            for (int i = 0; i + (1 << (j - 1)) < n; i++)
            {
                sparse[i][j] = compare(sparse[i][j - 1], sparse[i + (1 << (j - 1))][j - 1]);
            }
        }
    }

    int query(int l, int r)
    {
        int len = (r - l + 1);
        int power = 0;
        while (1 << (power + 1) <= len)
            power++;
        return compare(sparse[l][power], sparse[r - (1 << power) + 1][power]);
    }
};
